cat("P-value", p_values[i], "\n")
cat("P-value is significant:", p_values[i] < 0.05/length(p_values), "\n")
print(n_j)
}
potential_center_seqs = names(p_values)[p_values == min(p_values)]
new_center_seq = filter(partition_df, uniqueSequence %in% potential_center_seqs) %>% filter(., count == max(count)) %>%
select(., uniqueSequence) %>% unlist()
update_df = partition_df
update_df$partition[update_df$uniqueSequence == new_center_seq] = 2
update_df$center[update_df$uniqueSequence == new_center_seq] = 1
table(update_df$partition)
isomiR_seqs = update_df$uniqueSequence[update_df$center == 0]
master_lambdas = list(lambdas)
new_alignments = lapply(isomiR_seqs, pairwiseAlignment, pattern = new_center_seq)
names(new_alignments) = isomiR_seqs
new_transitions = lapply(new_alignments, get_transitions)
new_lambdas = lapply(new_transitions, compute_lambda, transition_probs = transition_prob_matrix)
master_lambdas[[2]] = new_lambdas
names(master_lambdas) = unique(update_df$partition)
for(i in isomiR_seqs){
l = lapply(master_lambdas, function(x) return(x[[i]])) %>% unlist()
l = which(l == max(l))
l = l[1]
update_df$partition[update_df$uniqueSequence == i] = l
}
table(update_df$partition)
prop_seqs_moving = 0
for(i in isomiR_seqs){
if(partition_df$partition[partition_df$uniqueSequence == i] != update_df$partition[update_df$uniqueSequence == i]){
prop_seqs_moving = prop_seqs_moving + 1
}
}
prop_seqs_moving = prop_seqs_moving / nrow(partition_df)
prop_seqs_moving
for(i in isomiR_seqs){
l = lapply(master_lambdas, function(x) return(x[[i]])) %>% unlist()
l = which(l == max(l))
update_df$partition[update_df$uniqueSequence == i] = l
}
prop_seqs_moving = 0
for(i in isomiR_seqs){
if(partition_df$partition[partition_df$uniqueSequence == i] != update_df$partition[update_df$uniqueSequence == i]){
prop_seqs_moving = prop_seqs_moving + 1
}
}
prop_seqs_moving = prop_seqs_moving / nrow(partition_df)
prop_seqs_moving
unique_partitions = unique(update_df$partition)
unique_partitions
p_values = vector(length = length(isomiR_seqs))
names(p_values) = isomiR_seqs
for(j in unique_partitions){
n_j = filter(update_df, partition == j) %>% select(., count) %>% unlist() %>% sum()
cat("n_j:", n_j, "\n")
partition_isomiRs = filter(update_df, partition == j & center == 0) %>% select(., uniqueSequence) %>% unlist()
for(i in partition_isomiRs){
n_i = update_df$count[update_df$uniqueSequence == i]
lambda = master_lambdas[[j]][[i]]
num = ppois(n_i-1, n_j*lambda, lower.tail = F)
denom = 1-dpois(0, n_j*lambda)
p_values[[i]] = num/denom
}
}
table(update_df$partition)
table(partition_df$partition)
partition_df = update_df
update_df = partition_df
for(j in unique_partitions){
cat("j:", j, "\n")
#step 1 - get partition isomiRs
partition_isomiRs = filter(partition_df, partition == j & center == 0) %>% select(., uniqueSequence) %>% unlist()
#step 2 - get p_values for those isomiRs
partition_p_values = p_values[partition_isomiRs]
#step 3 - id partition isomiR with smallest p-value
new_center_seqs = names(partition_p_values)[partition_p_values == min(partition_p_values)]
#step 4- not always necessary but of the sequences with the smallest p-values, pick sequence with largest read count to be new center sequence
#helps break ties
new_center_seq = filter(update_df, uniqueSequence %in% new_center_seqs) %>% filter(., count == max(count)) %>% select(., uniqueSequence) %>%
unlist()
#create new partition
new_partition = max(update_df$partition) + 1
cat("Creating new partition", new_partition, "from partition", j, "\n")
#now update
update_df$partition[update_df$uniqueSequence == new_center_seq] = new_partition
update_df$center[update_df$uniqueSequence == new_center_seq] = 1
}
table(partition_df$partition)
table(update_df$partition)
isomiR_seqs = update_df$uniqueSequence[update_df$center == 0]
length(isomiR_seqs)
filter(update_df, center == 1)
unique_partitions = unique(update_df$partition)
unique_partitions
for(j in unique_partitions){
if(!(j %in% names(master_lambdas))){
center = update_df$uniqueSequence[update_df$partition == j]
new_alignments = lapply(isomiR_seqs, pairwiseAlignment, pattern = center)
names(new_alignments) = isomiR_seqs
new_transitions = lapply(new_alignments, get_transitions)
new_lambdas = lapply(new_transitions, compute_lambda, transition_probs = transition_prob_matrix)
master_lambdas[[j]] = lambdas
}
}
names(master_lambdas)
length(master_lambdas)
lapply(master_lambdas, length)
master_lambdas[[3]] = NULL
master_lambdas[[4]] = NULL
master_lambdas
length(master_lambdas)
for(j in unique_partitions){
cat("j:", j, "\n")
# if(!(j %in% names(master_lambdas))){
#   center = update_df$uniqueSequence[update_df$partition == j & update_df$center == 1]
#   new_alignments = lapply(isomiR_seqs, pairwiseAlignment, pattern = center)
#   names(new_alignments) = isomiR_seqs
#   new_transitions = lapply(new_alignments, get_transitions)
#   new_lambdas = lapply(new_transitions, compute_lambda, transition_probs = transition_prob_matrix)
#   master_lambdas[[j]] = lambdas
# }
}
unique_partitions
order(unique_partitions)
sort(unique_partitions)
unique_partitions = unique(update_df$partition) %>% sort()
for(j in unique_partitions){
cat("j:", j, "\n")
# if(!(j %in% names(master_lambdas))){
#   center = update_df$uniqueSequence[update_df$partition == j & update_df$center == 1]
#   new_alignments = lapply(isomiR_seqs, pairwiseAlignment, pattern = center)
#   names(new_alignments) = isomiR_seqs
#   new_transitions = lapply(new_alignments, get_transitions)
#   new_lambdas = lapply(new_transitions, compute_lambda, transition_probs = transition_prob_matrix)
#   master_lambdas[[j]] = lambdas
# }
}
for(j in unique_partitions){
cat("j:", j, "\n")
if(!(j %in% names(master_lambdas))){
cat(j)
#   center = update_df$uniqueSequence[update_df$partition == j & update_df$center == 1]
#   new_alignments = lapply(isomiR_seqs, pairwiseAlignment, pattern = center)
#   names(new_alignments) = isomiR_seqs
#   new_transitions = lapply(new_alignments, get_transitions)
#   new_lambdas = lapply(new_transitions, compute_lambda, transition_probs = transition_prob_matrix)
#   master_lambdas[[j]] = lambdas
}
}
for(j in unique_partitions){
cat("j:", j, "\n")
if(!(j %in% names(master_lambdas))){
cat(j, "\n")
#   center = update_df$uniqueSequence[update_df$partition == j & update_df$center == 1]
#   new_alignments = lapply(isomiR_seqs, pairwiseAlignment, pattern = center)
#   names(new_alignments) = isomiR_seqs
#   new_transitions = lapply(new_alignments, get_transitions)
#   new_lambdas = lapply(new_transitions, compute_lambda, transition_probs = transition_prob_matrix)
#   master_lambdas[[j]] = lambdas
}
}
center = update_df$uniqueSequence[update_df$partition == j & update_df$center == 1]
center
center1 = update_df$uniqueSequence[update_df$partition == j]
center1
center == center 1
center == center1
filter(update_df, center == 3)
filter(update_df, center == 1)
j
center = filter(update_df, partition == j & center == 1) %>% select(., uniqueSequence) %>% unlist()
center
center1
center1 == center
filter(update_df, uniqueSequence == center)
filter(update_df, uniqueSequence == center1)
names(master_lambdas)
master_lambdas[[2]][[1]]
new_alignments[[1]]
master_lambdas[""] = NULL
master_lambdas
names(master_lambdas)
rm(master_lambdas)
master_lambdas = list(lambdas)
names(master_lambdas) = 1
names(master_lambdas)
length(master_lambdas)
unique_partitions
for(j in unique_partitions){
cat("j:", j, "\n")
if(!(j %in% names(master_lambdas))){
cat(j, "\n")
center = filter(update_df, partition == j & center == 1) %>% select(., uniqueSequence) %>% unlist()
new_alignments = lapply(isomiR_seqs, Biostrings::pairwiseAlignment, pattern = center)
names(new_alignments) = isomiR_seqs
new_transitions = lapply(new_alignments, get_transitions)
new_lambdas = lapply(new_transitions, compute_lambda, transition_probs = transition_prob_matrix)
master_lambdas[[j]] = new_lambdas
}
}
names(master_lambdas) = unique_partitions
lapply(master_lambdas, length)
for(i in isomiR_seqs){
l = lapply(master_lambdas, function(x) return(x[[i]])) %>% unlist()
l = which(l == max(l))
update_df$partition[update_df$uniqueSequence == i] = l
}
prop_seqs_moving = 0
for(i in isomiR_seqs){
if(partition_df$partition[partition_df$uniqueSequence == i] != update_df$partition[update_df$uniqueSequence == i]){
prop_seqs_moving = prop_seqs_moving + 1
}
}
prop_seqs_moving = prop_seqs_moving / nrow(partition_df)
prop_seqs_moving
table(partition_df$partition)
table(update_df$partition)
unique_partitions = unique(update_df$partition)
unique_par
unique_partitions
unique_partitions = unique(update_df$partition) %>% sort()
unique_partitions
p_values = vector(length = length(isomiR_seqs))
names(p_values) = isomiR_seqs
p_values
length(p_values)
for(j in unique_partitions){
n_j = filter(update_df, partition == j) %>% select(., count) %>% unlist() %>% sum()
cat("n_j:", n_j, "\n")
partition_isomiRs = filter(update_df, partition == j & center == 0) %>% select(., uniqueSequence) %>% unlist()
for(i in partition_isomiRs){
n_i = update_df$count[update_df$uniqueSequence == i]
lambda = master_lambdas[[j]][[i]]
num = ppois(n_i-1, n_j*lambda, lower.tail = F)
denom = 1-dpois(0, n_j*lambda)
p_values[[i]] = num/denom
}
}
table(update_df$partition)
table(partition_df$partition)
partition_df = update_df
update_df = partition_df
for(j in unique_partitions){
cat("j:", j, "\n")
#step 1 - get partition isomiRs
partition_isomiRs = filter(partition_df, partition == j & center == 0) %>% select(., uniqueSequence) %>% unlist()
#step 2 - get p_values for those isomiRs
partition_p_values = p_values[partition_isomiRs]
#step 3 - id partition isomiR with smallest p-value
new_center_seqs = names(partition_p_values)[partition_p_values == min(partition_p_values)]
#step 4- not always necessary but of the sequences with the smallest p-values, pick sequence with largest read count to be new center sequence
#helps break ties
new_center_seq = filter(update_df, uniqueSequence %in% new_center_seqs) %>% filter(., count == max(count)) %>% select(., uniqueSequence) %>%
unlist()
#create new partition
new_partition = max(update_df$partition) + 1
cat("Creating new partition", new_partition, "from partition", j, "\n")
#now update
update_df$partition[update_df$uniqueSequence == new_center_seq] = new_partition
update_df$center[update_df$uniqueSequence == new_center_seq] = 1
}
isomiR_seqs = update_df$uniqueSequence[update_df$center == 0]
unique_partitions = unique(update_df$partition) %>% sort()
for(j in unique_partitions){
cat("j:", j, "\n")
if(!(j %in% names(master_lambdas))){
cat(j, "\n")
center = filter(update_df, partition == j & center == 1) %>% select(., uniqueSequence) %>% unlist()
new_alignments = lapply(isomiR_seqs, Biostrings::pairwiseAlignment, pattern = center)
names(new_alignments) = isomiR_seqs
new_transitions = lapply(new_alignments, get_transitions)
new_lambdas = lapply(new_transitions, compute_lambda, transition_probs = transition_prob_matrix)
master_lambdas[[j]] = new_lambdas
}
}
table(update_df$partition)
table(partition_df$partition)
length(master_lambdas)
length(isomiR_seqs)
names(master_lambdas)
names(master_lambdas) = unique_partitions
names(master_lambdas)
for(i in isomiR_seqs){
l = lapply(master_lambdas, function(x) return(x[[i]])) %>% unlist()
l = which(l == max(l))
update_df$partition[update_df$uniqueSequence == i] = l
}
table(update_df$partition)
prop_seqs_moving = 0
for(i in isomiR_seqs){
if(partition_df$partition[partition_df$uniqueSequence == i] != update_df$partition[update_df$uniqueSequence == i]){
prop_seqs_moving = prop_seqs_moving + 1
}
}
prop_seqs_moving = prop_seqs_moving / nrow(partition_df)
prop_seqs_moving
unique_partitions = unique(update_df$partition) %>% sort()
unique_partitions
p_values = vector(length = length(isomiR_seqs))
names(p_values) = isomiR_seqs
length(p_values)
head(p_values)
for(j in unique_partitions){
n_j = filter(update_df, partition == j) %>% select(., count) %>% unlist() %>% sum()
cat("n_j:", n_j, "\n")
partition_isomiRs = filter(update_df, partition == j & center == 0) %>% select(., uniqueSequence) %>% unlist()
for(i in partition_isomiRs){
n_i = update_df$count[update_df$uniqueSequence == i]
lambda = master_lambdas[[j]][[i]]
num = ppois(n_i-1, n_j*lambda, lower.tail = F)
denom = 1-dpois(0, n_j*lambda)
p_values[[i]] = num/denom
}
}
head(p_values)
partition_df = update_df
update_df = partition_df
for(j in unique_partitions){
cat("j:", j, "\n")
#step 1 - get partition isomiRs
partition_isomiRs = filter(partition_df, partition == j & center == 0) %>% select(., uniqueSequence) %>% unlist()
#step 2 - get p_values for those isomiRs
partition_p_values = p_values[partition_isomiRs]
#step 3 - id partition isomiR with smallest p-value
new_center_seqs = names(partition_p_values)[partition_p_values == min(partition_p_values)]
#step 4- not always necessary but of the sequences with the smallest p-values, pick sequence with largest read count to be new center sequence
#helps break ties
new_center_seq = filter(update_df, uniqueSequence %in% new_center_seqs) %>% filter(., count == max(count)) %>% select(., uniqueSequence) %>%
unlist()
#create new partition
new_partition = max(update_df$partition) + 1
cat("Creating new partition", new_partition, "from partition", j, "\n")
#now update
update_df$partition[update_df$uniqueSequence == new_center_seq] = new_partition
update_df$center[update_df$uniqueSequence == new_center_seq] = 1
}
filter(update_df, center == 1)
length(isomiR_seqs)
isomiR_seqs = update_df$uniqueSequence[update_df$center == 0]
length(isomiR_seqs)
unique_partitions = unique(update_df$partition) %>% sort()
unique_partitions
for(j in unique_partitions){
cat("j:", j, "\n")
if(!(j %in% names(master_lambdas))){
cat(j, "\n")
center = filter(update_df, partition == j & center == 1) %>% select(., uniqueSequence) %>% unlist()
new_alignments = lapply(isomiR_seqs, Biostrings::pairwiseAlignment, pattern = center)
names(new_alignments) = isomiR_seqs
new_transitions = lapply(new_alignments, get_transitions)
new_lambdas = lapply(new_transitions, compute_lambda, transition_probs = transition_prob_matrix)
master_lambdas[[j]] = new_lambdas
}
}
library(parallel)
detectCores()
length(master_lambdas)
names(master_lambdas)
names(master_lambdas) = unique_partitions
names(master_lambdas)
for(i in isomiR_seqs){
l = lapply(master_lambdas, function(x) return(x[[i]])) %>% unlist()
l = which(l == max(l))
update_df$partition[update_df$uniqueSequence == i] = l
}
prop_seqs_moving = 0
for(i in isomiR_seqs){
if(partition_df$partition[partition_df$uniqueSequence == i] != update_df$partition[update_df$uniqueSequence == i]){
prop_seqs_moving = prop_seqs_moving + 1
}
}
prop_seqs_moving = prop_seqs_moving / nrow(partition_df)
prop_seqs_moving
table(update_df$partition)
16/nrow(partition_df)
unique_partitions = unique(update_df$partition) %>% sort()
p_values = vector(length = length(isomiR_seqs))
names(p_values) = isomiR_seqs
length(p_values)
for(j in unique_partitions){
n_j = filter(update_df, partition == j) %>% select(., count) %>% unlist() %>% sum()
cat("n_j:", n_j, "\n")
partition_isomiRs = filter(update_df, partition == j & center == 0) %>% select(., uniqueSequence) %>% unlist()
for(i in partition_isomiRs){
n_i = update_df$count[update_df$uniqueSequence == i]
lambda = master_lambdas[[j]][[i]]
num = ppois(n_i-1, n_j*lambda, lower.tail = F)
denom = 1-dpois(0, n_j*lambda)
p_values[[i]] = num/denom
}
}
partition_df = update_df
update_df = partition_df
head(p_values)
sum(p_values < 0.05/nrow(partition_df))
for(j in unique_partitions){
cat("j:", j, "\n")
#step 1 - get partition isomiRs
partition_isomiRs = filter(partition_df, partition == j & center == 0) %>% select(., uniqueSequence) %>% unlist()
#step 2 - get p_values for those isomiRs
partition_p_values = p_values[partition_isomiRs]
#step 3 - id partition isomiR with smallest p-value
new_center_seqs = names(partition_p_values)[partition_p_values == min(partition_p_values)]
#step 4- not always necessary but of the sequences with the smallest p-values, pick sequence with largest read count to be new center sequence
#helps break ties
new_center_seq = filter(update_df, uniqueSequence %in% new_center_seqs) %>% filter(., count == max(count)) %>% select(., uniqueSequence) %>%
unlist()
#create new partition
new_partition = max(update_df$partition) + 1
cat("Creating new partition", new_partition, "from partition", j, "\n")
#now update
update_df$partition[update_df$uniqueSequence == new_center_seq] = new_partition
update_df$center[update_df$uniqueSequence == new_center_seq] = 1
}
isomiR_seqs = update_df$uniqueSequence[update_df$center == 0]
length(isomiR_seqs)
unique_partitions = unique(update_df$partition) %>% sort()
foreach(i=17:18) %dopar% {
cat("j:", j,  "\n")
center = filter(update_df, partition == i & center == 1)  %>% select(., uniqueSequence) %>%
unlist()
new_alignments = lapply(isomiR_seqs,  Biostrings::pairwiseAlignment, pattern = center)
names(new_alignments) = isomiR_seqs
new_transitions  = lapply(new_alignments, get_transitions)
new_lambdas = lapply(new_transitions, compute_lambda, transition_probs = transition_prob_matrix)
master_lambdas[[i]] = new_lambdas
}
library(foreach)
foreach(i=17:18) %dopar% {
cat("j:", j,  "\n")
center = filter(update_df, partition == i & center == 1)  %>% select(., uniqueSequence) %>%
unlist()
new_alignments = lapply(isomiR_seqs,  Biostrings::pairwiseAlignment, pattern = center)
names(new_alignments) = isomiR_seqs
new_transitions  = lapply(new_alignments, get_transitions)
new_lambdas = lapply(new_transitions, compute_lambda, transition_probs = transition_prob_matrix)
master_lambdas[[i]] = new_lambdas
}
registerDoParallel(cores=4)
library(doParallel)
registerDoParallel(cores=4)
foreach(i=17:18) %dopar% {
cat("i:", i,  "\n")
center = filter(update_df, partition == i & center == 1)  %>% select(., uniqueSequence) %>%
unlist()
new_alignments = lapply(isomiR_seqs,  Biostrings::pairwiseAlignment, pattern = center)
names(new_alignments) = isomiR_seqs
new_transitions  = lapply(new_alignments, get_transitions)
new_lambdas = lapply(new_transitions, compute_lambda, transition_probs = transition_prob_matrix)
master_lambdas[[i]] = new_lambdas
}
length(master_lambdas)
?foreach()
registerDoParallel(cores=16)
results = foreach(i=17:18, .combine=) %dopar% {
cat("i:", i,  "\n")
center = filter(update_df, partition == i & center == 1)  %>% select(., uniqueSequence) %>%
unlist()
new_alignments = lapply(isomiR_seqs,  Biostrings::pairwiseAlignment, pattern = center)
names(new_alignments) = isomiR_seqs
new_transitions  = lapply(new_alignments, get_transitions)
new_lambdas = lapply(new_transitions, compute_lambda, transition_probs = transition_prob_matrix)
master_lambdas[[i]] = new_lambdas
}
names(results)
lapply(results, length)
new_partitions = update_df$partition[!(update_df$partition) %in% partition_df$partition]
new_partitions
registerDoParallel(cores=32)
start = Sys.time()
results = foreach(i=new_partitions, .combine=) %dopar% {
cat("i:", i,  "\n")
center = filter(update_df, partition == i & center == 1)  %>% select(., uniqueSequence) %>%
unlist()
new_alignments = lapply(isomiR_seqs,  Biostrings::pairwiseAlignment, pattern = center)
names(new_alignments) = isomiR_seqs
new_transitions  = lapply(new_alignments, get_transitions)
new_lambdas = lapply(new_transitions, compute_lambda, transition_probs = transition_prob_matrix)
master_lambdas[[i]] = new_lambdas
}
elapsed = Sys.time()-start
cat("Elapsed time:", elapsed, "\n")
elapsed
length(results)
names(results)
names(results) = new_partitions
c(master_lambdas, results)
lapply(results, function(x) names(x) = isomiR_seqs)
results = lapply(results, function(x) names(x) = isomiR_seqs)
type(c(master_lambdas, results))
length(c(master_lambdas, results))
length(master_lambdas)
master_lambdas = c(master_lambdas, results)
names(master_lambdas)
dim(rowdata)
dim(count_df)
count_df
head(count_df)
partition_df = filter(count_df, miRNA_name == test_miRNA)
partition_df$partition = rep(1, nrow(partition_df))
partition_df$center = rep(0, nrow(partition_df))
partition_df$center[partition_df$uniqueSequence == initial_center_seq] = 1
head(partition_df)
filter(partition_df, center == 1)
isomiR_seqs = filter(partition_df, center == 0) %>% select(., uniqueSequence) %>% unlist() %>% unname()
alignments = lapply(isomiR_seqs, Biostrings::pairwiseAlignment, pattern = isomiR_seqs)
names(alignments) = isomiR_seqs
transitions = lapply(alignments, get_transitions)
devtools::install_github("https://github.com/vonkaenelerik/ShollBayes.git")
librart(devtools)
library(devtools)
install.packages("devtools")
library(devtools)
